# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import image_hasher_pb2 as image__hasher__pb2


class ImageHasherStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Hash = channel.unary_unary(
                '/imagehasher.ImageHasher/Hash',
                request_serializer=image__hasher__pb2.HashRequest.SerializeToString,
                response_deserializer=image__hasher__pb2.HashResponse.FromString,
                )
        self.Compare = channel.unary_unary(
                '/imagehasher.ImageHasher/Compare',
                request_serializer=image__hasher__pb2.CompareRequest.SerializeToString,
                response_deserializer=image__hasher__pb2.CompareResponse.FromString,
                )
        self.SingleDistance = channel.unary_unary(
                '/imagehasher.ImageHasher/SingleDistance',
                request_serializer=image__hasher__pb2.DistanceRequest.SerializeToString,
                response_deserializer=image__hasher__pb2.DistanceResponse.FromString,
                )


class ImageHasherServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Hash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Compare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SingleDistance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageHasherServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Hash': grpc.unary_unary_rpc_method_handler(
                    servicer.Hash,
                    request_deserializer=image__hasher__pb2.HashRequest.FromString,
                    response_serializer=image__hasher__pb2.HashResponse.SerializeToString,
            ),
            'Compare': grpc.unary_unary_rpc_method_handler(
                    servicer.Compare,
                    request_deserializer=image__hasher__pb2.CompareRequest.FromString,
                    response_serializer=image__hasher__pb2.CompareResponse.SerializeToString,
            ),
            'SingleDistance': grpc.unary_unary_rpc_method_handler(
                    servicer.SingleDistance,
                    request_deserializer=image__hasher__pb2.DistanceRequest.FromString,
                    response_serializer=image__hasher__pb2.DistanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'imagehasher.ImageHasher', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImageHasher(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Hash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/imagehasher.ImageHasher/Hash',
            image__hasher__pb2.HashRequest.SerializeToString,
            image__hasher__pb2.HashResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Compare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/imagehasher.ImageHasher/Compare',
            image__hasher__pb2.CompareRequest.SerializeToString,
            image__hasher__pb2.CompareResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SingleDistance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/imagehasher.ImageHasher/SingleDistance',
            image__hasher__pb2.DistanceRequest.SerializeToString,
            image__hasher__pb2.DistanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
