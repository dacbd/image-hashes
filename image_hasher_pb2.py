# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: image_hasher.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x12image_hasher.proto\x12\x0bimagehasher\"\x1c\n\x0bHashRequest\x12\r\n\x05image\x18\x01 \x01(\x0c\"m\n\x0cHashResponse\x12-\n\nstd_hashes\x18\x01 \x01(\x0b\x32\x19.imagehasher.CryptoHashes\x12.\n\x0cimage_hashes\x18\x02 \x01(\x0b\x32\x18.imagehasher.ImageHashes\"2\n\x0e\x43ompareRequest\x12\x0c\n\x04\x62\x61se\x18\x01 \x01(\x0c\x12\x12\n\ncomparator\x18\x02 \x01(\x0c\"\x92\x01\n\x0f\x43ompareResponse\x12\'\n\x04\x62\x61se\x18\x01 \x01(\x0b\x32\x19.imagehasher.CryptoHashes\x12-\n\ncomparator\x18\x02 \x01(\x0b\x32\x19.imagehasher.CryptoHashes\x12\'\n\x08\x64istance\x18\x03 \x01(\x0b\x32\x15.imagehasher.Distance\"3\n\x0f\x44istanceRequest\x12\x0c\n\x04\x62\x61se\x18\x01 \x01(\t\x12\x12\n\ncomparator\x18\x02 \x01(\t\"$\n\x10\x44istanceResponse\x12\x10\n\x08\x64istance\x18\x01 \x01(\x05\"\x93\x01\n\x08\x44istance\x12\r\n\x05\x64hash\x18\x01 \x01(\x05\x12\r\n\x05phash\x18\x02 \x01(\x05\x12\r\n\x05whash\x18\x03 \x01(\x05\x12\x14\n\x0c\x61verage_hash\x18\x04 \x01(\x05\x12\x12\n\ncolor_hash\x18\x05 \x01(\x05\x12\x30\n\tcrop_hash\x18\x06 \x01(\x0b\x32\x1d.imagehasher.CropHashDistance\"G\n\x10\x43ropHashDistance\x12\x19\n\x11matching_segments\x18\x01 \x01(\x05\x12\x18\n\x10hamming_distance\x18\x02 \x01(\x05\"9\n\x0c\x43ryptoHashes\x12\x0b\n\x03md5\x18\x01 \x01(\t\x12\x0c\n\x04sha1\x18\x02 \x01(\t\x12\x0e\n\x06sha256\x18\x03 \x01(\t\"y\n\x0bImageHashes\x12\r\n\x05phash\x18\x01 \x01(\t\x12\r\n\x05\x64hash\x18\x02 \x01(\t\x12\r\n\x05whash\x18\x03 \x01(\t\x12\x14\n\x0c\x61verage_hash\x18\x04 \x01(\t\x12\x12\n\ncolor_hash\x18\x05 \x01(\t\x12\x13\n\x0b\x63rop_hashes\x18\x06 \x03(\t2\xdf\x01\n\x0bImageHasher\x12;\n\x04Hash\x12\x18.imagehasher.HashRequest\x1a\x19.imagehasher.HashResponse\x12\x44\n\x07\x43ompare\x12\x1b.imagehasher.CompareRequest\x1a\x1c.imagehasher.CompareResponse\x12M\n\x0eSingleDistance\x12\x1c.imagehasher.DistanceRequest\x1a\x1d.imagehasher.DistanceResponseb\x06proto3')



_HASHREQUEST = DESCRIPTOR.message_types_by_name['HashRequest']
_HASHRESPONSE = DESCRIPTOR.message_types_by_name['HashResponse']
_COMPAREREQUEST = DESCRIPTOR.message_types_by_name['CompareRequest']
_COMPARERESPONSE = DESCRIPTOR.message_types_by_name['CompareResponse']
_DISTANCEREQUEST = DESCRIPTOR.message_types_by_name['DistanceRequest']
_DISTANCERESPONSE = DESCRIPTOR.message_types_by_name['DistanceResponse']
_DISTANCE = DESCRIPTOR.message_types_by_name['Distance']
_CROPHASHDISTANCE = DESCRIPTOR.message_types_by_name['CropHashDistance']
_CRYPTOHASHES = DESCRIPTOR.message_types_by_name['CryptoHashes']
_IMAGEHASHES = DESCRIPTOR.message_types_by_name['ImageHashes']
HashRequest = _reflection.GeneratedProtocolMessageType('HashRequest', (_message.Message,), {
  'DESCRIPTOR' : _HASHREQUEST,
  '__module__' : 'image_hasher_pb2'
  # @@protoc_insertion_point(class_scope:imagehasher.HashRequest)
  })
_sym_db.RegisterMessage(HashRequest)

HashResponse = _reflection.GeneratedProtocolMessageType('HashResponse', (_message.Message,), {
  'DESCRIPTOR' : _HASHRESPONSE,
  '__module__' : 'image_hasher_pb2'
  # @@protoc_insertion_point(class_scope:imagehasher.HashResponse)
  })
_sym_db.RegisterMessage(HashResponse)

CompareRequest = _reflection.GeneratedProtocolMessageType('CompareRequest', (_message.Message,), {
  'DESCRIPTOR' : _COMPAREREQUEST,
  '__module__' : 'image_hasher_pb2'
  # @@protoc_insertion_point(class_scope:imagehasher.CompareRequest)
  })
_sym_db.RegisterMessage(CompareRequest)

CompareResponse = _reflection.GeneratedProtocolMessageType('CompareResponse', (_message.Message,), {
  'DESCRIPTOR' : _COMPARERESPONSE,
  '__module__' : 'image_hasher_pb2'
  # @@protoc_insertion_point(class_scope:imagehasher.CompareResponse)
  })
_sym_db.RegisterMessage(CompareResponse)

DistanceRequest = _reflection.GeneratedProtocolMessageType('DistanceRequest', (_message.Message,), {
  'DESCRIPTOR' : _DISTANCEREQUEST,
  '__module__' : 'image_hasher_pb2'
  # @@protoc_insertion_point(class_scope:imagehasher.DistanceRequest)
  })
_sym_db.RegisterMessage(DistanceRequest)

DistanceResponse = _reflection.GeneratedProtocolMessageType('DistanceResponse', (_message.Message,), {
  'DESCRIPTOR' : _DISTANCERESPONSE,
  '__module__' : 'image_hasher_pb2'
  # @@protoc_insertion_point(class_scope:imagehasher.DistanceResponse)
  })
_sym_db.RegisterMessage(DistanceResponse)

Distance = _reflection.GeneratedProtocolMessageType('Distance', (_message.Message,), {
  'DESCRIPTOR' : _DISTANCE,
  '__module__' : 'image_hasher_pb2'
  # @@protoc_insertion_point(class_scope:imagehasher.Distance)
  })
_sym_db.RegisterMessage(Distance)

CropHashDistance = _reflection.GeneratedProtocolMessageType('CropHashDistance', (_message.Message,), {
  'DESCRIPTOR' : _CROPHASHDISTANCE,
  '__module__' : 'image_hasher_pb2'
  # @@protoc_insertion_point(class_scope:imagehasher.CropHashDistance)
  })
_sym_db.RegisterMessage(CropHashDistance)

CryptoHashes = _reflection.GeneratedProtocolMessageType('CryptoHashes', (_message.Message,), {
  'DESCRIPTOR' : _CRYPTOHASHES,
  '__module__' : 'image_hasher_pb2'
  # @@protoc_insertion_point(class_scope:imagehasher.CryptoHashes)
  })
_sym_db.RegisterMessage(CryptoHashes)

ImageHashes = _reflection.GeneratedProtocolMessageType('ImageHashes', (_message.Message,), {
  'DESCRIPTOR' : _IMAGEHASHES,
  '__module__' : 'image_hasher_pb2'
  # @@protoc_insertion_point(class_scope:imagehasher.ImageHashes)
  })
_sym_db.RegisterMessage(ImageHashes)

_IMAGEHASHER = DESCRIPTOR.services_by_name['ImageHasher']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _HASHREQUEST._serialized_start=35
  _HASHREQUEST._serialized_end=63
  _HASHRESPONSE._serialized_start=65
  _HASHRESPONSE._serialized_end=174
  _COMPAREREQUEST._serialized_start=176
  _COMPAREREQUEST._serialized_end=226
  _COMPARERESPONSE._serialized_start=229
  _COMPARERESPONSE._serialized_end=375
  _DISTANCEREQUEST._serialized_start=377
  _DISTANCEREQUEST._serialized_end=428
  _DISTANCERESPONSE._serialized_start=430
  _DISTANCERESPONSE._serialized_end=466
  _DISTANCE._serialized_start=469
  _DISTANCE._serialized_end=616
  _CROPHASHDISTANCE._serialized_start=618
  _CROPHASHDISTANCE._serialized_end=689
  _CRYPTOHASHES._serialized_start=691
  _CRYPTOHASHES._serialized_end=748
  _IMAGEHASHES._serialized_start=750
  _IMAGEHASHES._serialized_end=871
  _IMAGEHASHER._serialized_start=874
  _IMAGEHASHER._serialized_end=1097
# @@protoc_insertion_point(module_scope)
